name: 'Terraform'

on:
  push:
    branches:
#      - "dev"
      - "master"
  pull_request:

permissions:
  contents: write
  id-token: write
jobs:
  terraform:
    name: 'Terraform'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_SECRET_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    runs-on: ubuntu-latest
    environment: dev
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID}}
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.1.7"

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        run: |
          terraform init
      - name: Terraform Validate
        id: validate
        if: github.event_name == 'pull_request'
        run: terraform validate
        continue-on-error: true
      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
        continue-on-error: true
      # Generates an execution plan for Terraform
      - name: Terraform Plan
#        id: plan
#        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false -out=tf.plan
        continue-on-error: true
      - name: Terraform Apply
#        if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
#        if: github.event_name == 'push'
#        run: terraform apply -auto-approve -var="AZURE_SUBSCRIPTION_ID=$(PAT)" -var="password=$(PASSWORD)"
#        run: terraform apply -auto-approve -input=false
        run: terraform apply -auto-approve -input=tf.plan
        

